generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id              String   @id @default(uuid())
  name            String
  email           String
  phone           String
  appointmentDate DateTime
  time            String
  serviceId       String
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  service         Service  @relation(fields: [serviceId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model Reminder {
  id          String   @id @default(uuid())
  description String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Service {
  id          String        @id @default(uuid())
  name        String
  price       Int
  duration    Int
  status      Boolean       @default(true)
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  appointment Appointment[]
  user        User          @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String   @id @default(uuid())
  status    String
  plan      Plan
  priceId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  emailVerified      DateTime?
  image              String?
  address            String?         @default("")
  phone              String?         @default("")
  status             Boolean         @default(true)
  timeZone           String?
  stripe_customer_id String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  times              String[]        @default([])
  accounts           Account[]
  appointments       Appointment[]
  Authenticator      Authenticator[]
  reminders          Reminder[]
  services           Service[]
  sessions           Session[]
  subscription       Subscription?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Plan {
  BASIC
  PROFESSIONAL
}
